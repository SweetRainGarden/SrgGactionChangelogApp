# --------------------------------------------------------------------------------------------------
# Input: jira_domain, gh_token, and trigger keywords
# Process: 
# 1, extract jira ticket from dev's branch name, commits, pull request title, and pull request body
# 2, extract commit based git commit convention with: fix:feat:chore convention
# 3, append and inject the jira_domain into jira ticket of the step 2 in markdown format
# 4, check if trigger keywords are in pull request title or body. (Optional)
# Output: jira_tickets_list and absolute path of changelog.md 

# add colums to google sheet: jira_tickets, commits
# deal with the link in google sheet script for quick acess.
# --------------------------------------------------------------------------------------------------
name: 'Srg auto collect changelog'
description: 'Auto collect changelog'
inputs:
  enforce_jira_policy:
    description: 'Enforce Jira policy'
    required: fasle
    default: 'true'
  jira_domain:
    description: 'The company Jira domain'
    required: true
    default: 'srgxxxx.atlassian.net'
  gh_token:
    description: 'A Github token with read permission for repos'
    required: true
  pattern_commit_convention:
    required: false
    default: "feat|fix|ci|chore|docs"
    description: 'The commit message convention pattern'
  pattern_jira_tickets:
    required: false
    default: "([a-z]{2,}-)([0-9]+)"
    description: 'Regex for extract jira ticket'
  google_sheet_token:
    required: true
    description: 'Google sheet token'
  google_sheet_id:
    required: true
    description: 'Google sheet id'
  google_sheet_client_email:
    required: true
    description: 'Google sheet client email'
  google_sheet_work_sheet_title:
    required: true
    description: 'Google sheet work sheet tittle'
outputs:
  jira_ticket_list:
    description: "The jira tickets list form pull request and commit message"
    value: ${{ steps.export_outputs_step.outputs.jira_ticket_list }}
  srg_changelog_file:
    description: "The file that contains changelog of current pull request"
    value: ${{ steps.export_outputs_step.outputs.srg_changelog_file }}
runs:
  using: "composite"
  steps:
    - run: echo Hello ${{ inputs.jira_domain }}.
      shell: bash

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    # - run: echo "${{ toJSON(github) }}"
    #   shell: bash

    - run: pwd
      shell: bash

    - run: |
        echo name: "AAA -> Figure out env --> 0: Pr event type"
        echo ""
        echo "github event action: ${{github.event.action}}"
        if [[ "${{ github.event_name }}" == 'pull_request' && "${{github.event.pull_request.merged}}" == 'true' && "${{github.event.action}}" == 'closed' ]]; then
          echo "----------------------------> PR merged and closed. <----------------------------"
        elif [[ "${{ github.event_name }}" == 'pull_request' && "${{github.event.pull_request.merged}}" == 'false' && "${{github.event.action}}" == 'closed' ]]; then
          echo "----------------------------> PR closed without merging, do nothing. <----------------------------"
        else
          echo "----------------------------> PR event action:${{github.event_name}} <----------------------------"
        fi
      shell: bash

    - run: |
        echo name: "AAA -> Figure out env --> 0: Test srcipt"
        echo ""
        goodbye.sh
      shell: bash
      if: ${{ github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true }}

    - run: |
        echo "AAA -> Init env --> 1: Init file name into GITHUB_ENV"
        echo ""
        echo "SRG_PR_CONTENT_TXT=srg_temp_pr_and_branch_info.txt" >> $GITHUB_ENV
        echo "SRG_TEMP_FILE=srg_temp.txt" >> $GITHUB_ENV
        echo "SRG_TEMP_COMMITS_FILE=srg_temp_commits.txt" >> $GITHUB_ENV
        echo "SRG_OUTPUT_TICKETS_FILE=srg_output_tickets.txt" >> $GITHUB_ENV
        echo "SRG_OUTPUT_COMMITS_FILE=srg_output_commits.txt" >> $GITHUB_ENV
      shell: bash

    - run: |
        echo "AAA -> init env --> 2: Get repo company name"
        echo ""
        repo_org_name=$(get_repo_company_name.sh "SrgGactionChangelogApp")
        echo "repo_org_name --> $repo_org_name"
      shell: bash

    - run: |
        echo "CCC -> Get commits --> 0: save commit message to text"
        echo ""
        PR_NUMBER="${{ github.event.pull_request.number }}"
        REPO_NAME="${{ github.repository }}"
        API_URL="https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/commits" 
        curl -s -H "Authorization: token ${{ inputs.gh_token }}" -H "Accept: application/vnd.github+json" $API_URL > "${{ env.SRG_TEMP_FILE}}"

        jq_installed=$(command -v jq)
        if [ -z "$jq_installed" ]; then
          echo "jq is not installed on the machie, exit..." 
          exit 1
        fi

        # cat "./${{ env.SRG_TEMP_FILE}}"
        echo "---------------------------------------------"
        cat "./${{ env.SRG_TEMP_FILE}}" | jq -r '.[] | "\(.commit.message)"' > "./${{ env.SRG_TEMP_COMMITS_FILE }}"
        echo "" >> "./${{ env.SRG_TEMP_COMMITS_FILE }}"
        cat "./${{ env.SRG_TEMP_COMMITS_FILE }}"
      if: ${{ github.event_name == 'pull_request' }}
      shell: bash

    - if: ${{ github.event_name == 'pull_request' }}
      uses: DamianReeves/write-file-action@master
      with:
        path: "./${{ env.SRG_PR_CONTENT_TXT }}"
        contents: |
          ${{ github.head_ref }}
          ${{ github.event.pull_request.title }}
          ${{ github.event.pull_request.body }}
        write-mode: overwrite

    - if: ${{ github.event_name == 'pull_request' }}
      id: export_outputs_step
      run: |
        echo "WWW -> Print original content"
        # add a end line for SRG_PR_CONTENT_TXT
        echo "" >> "${{ env.SRG_PR_CONTENT_TXT }}"
        echo ""

        echo "------------------ cat ${{ env.SRG_TEMP_COMMITS_FILE }} --------------------"
        cat "${{ env.SRG_TEMP_COMMITS_FILE }}"
        echo "----------------------------------------------------------------------------"
        echo ""
        
        echo "------------------ cat ${{ env.SRG_PR_CONTENT_TXT }} --------------------"
        cat "${{ env.SRG_PR_CONTENT_TXT }}"
        echo "----------------------------------------------------------------------------"

      shell: bash

    - run: |
        echo "WWW -> Extract Jira tickets"
        if cat "${{ env.SRG_PR_CONTENT_TXT }}" "${{ env.SRG_TEMP_COMMITS_FILE }}" | grep -Eo "${{ inputs.pattern_jira_tickets }}" >/dev/null 2>&1; then
          echo "Extract Jira tickets succeed"
          cat "${{ env.SRG_PR_CONTENT_TXT }}" "${{ env.SRG_TEMP_COMMITS_FILE }}" | grep -Eo "${{ inputs.pattern_jira_tickets }}" | sort -u | sort -n > "${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        else
          touch "${{ env.SRG_OUTPUT_TICKETS_FILE }}"
          echo "Extract Jira tickets failed"
        fi
        echo "cat: ${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        cat "${{ env.SRG_OUTPUT_TICKETS_FILE }}"
      shell: bash
      if: ${{ github.event_name == 'pull_request' }}
      
    - name: 'TTT -> Enforce Jira policy'
      run: |
        echo "TTT -> Enforce Jira policy."
        if [ -s "./${{ env.SRG_OUTPUT_TICKETS_FILE }}" ]; then
          echo "Jira ticket list is not empty."
          cat "./${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        else
          echo "## Please make sure your pull request contains at least one Jira ticket id in any those places:" >>$GITHUB_STEP_SUMMARY
          echo "- commit message" >>$GITHUB_STEP_SUMMARY
          echo "- pull request title, or pull reuqest body" >>$GITHUB_STEP_SUMMARY
          echo "- branch name." >>$GITHUB_STEP_SUMMARY
          echo "## 请确保当前 pull request 关联（至少）一个 Jira ticket id， 以下任何地方都可以:" >>$GITHUB_STEP_SUMMARY
          echo "- 提交信息 （commit message）" >>$GITHUB_STEP_SUMMARY
          echo "- pull request 标题栏, 或者 pull reuqest 内题栏" >>$GITHUB_STEP_SUMMARY
          echo "- 分支名称，（branch name）" >>$GITHUB_STEP_SUMMARY
          echo "::error::Please make sure your pull request or commit messages contains at least one Jira ticket id"
          echo "::error::请确保当前 pull request 或者 commit message 关联（至少）一个 Jira ticket id"
          exit 1
        fi
        cat "${{ env.SRG_OUTPUT_TICKETS_FILE }}"
      shell: bash
      if: ${{ inputs.enforce_jira_policy == 'true' }}
      
    - name: 'TTT -> Reminder Jira policy'
      run: |
        echo "TTT -> Enforce Jira policy."
        if [ -s "./${{ env.SRG_OUTPUT_TICKETS_FILE }}" ]; then
          echo "Jira ticket list is not empty."
          cat "./${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        else
          echo "## Warning⚠️, please make sure your pull request contains at least one Jira ticket id in any those places:" >>$GITHUB_STEP_SUMMARY
          echo "- commit message" >>$GITHUB_STEP_SUMMARY
          echo "- pull request title, or pull reuqest body" >>$GITHUB_STEP_SUMMARY
          echo "- branch name." >>$GITHUB_STEP_SUMMARY
          echo "## 警告⚠️，请确保当前 pull request 关联（至少）一个 Jira ticket id， 以下任何地方都可以:" >>$GITHUB_STEP_SUMMARY
          echo "- 提交信息 （commit message）" >>$GITHUB_STEP_SUMMARY
          echo "- pull request 标题栏, 或者 pull reuqest 内题栏" >>$GITHUB_STEP_SUMMARY
          echo "- 分支名称，（branch name）" >>$GITHUB_STEP_SUMMARY
          echo "::warning::Please make sure your pull request or commit messages contains at least one Jira ticket id"
          echo "::warning::请确保当前 pull request 或者 commit message 关联（至少）一个 Jira ticket id"
        fi
        cat "${{ env.SRG_OUTPUT_TICKETS_FILE }}"
      shell: bash
      if: ${{ inputs.enforce_jira_policy != 'true' }}

    - run: |
        echo "WWW -> Extract commit messages"
        if cat "${{ env.SRG_PR_CONTENT_TXT }}" "${{ env.SRG_TEMP_COMMITS_FILE }}" | grep -i -E "(${{ inputs.pattern_commit_convention }}):" >/dev/null 2>&1; then
          echo "Extract commit messages succeed"
          cat "${{ env.SRG_PR_CONTENT_TXT }}" "${{ env.SRG_TEMP_COMMITS_FILE }}" | grep -i -E "(${{ inputs.pattern_commit_convention }}):" | sed -e 's/([^()]*)//g' | sed 's/;/,/g'| sort -u | sort -n > "${{ env.SRG_OUTPUT_COMMITS_FILE }}" 
        else
          echo "Extract commit messages failed"
          touch "${{ env.SRG_OUTPUT_COMMITS_FILE }}"
        fi
      shell: bash
      if: ${{ github.event_name == 'pull_request' }}
      
    - run: |
        echo "XXX -> Print --> 0: cat files"
        echo ""
        pwd="$(pwd)"

        echo "-----------------------------------------------------"
        echo "cat: ${pwd}/${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        cat "${pwd}/${{ env.SRG_OUTPUT_TICKETS_FILE }}"
        echo "-----------------------------------------------------"
        echo "cat: ${pwd}/${{ env.SRG_OUTPUT_COMMITS_FILE }}"
        cat "${pwd}/${{ env.SRG_OUTPUT_COMMITS_FILE }}"
        echo "-----------------------------------------------------"
      shell: bash
      if: ${{ github.event_name == 'pull_request' }}


    - name: 'TTT -> Get action trigger time'
      run: |
        # Get the current date and time in Seattle time zone
        seattle_time=$(TZ='America/Los_Angeles' date '+%m/%d/%Y %T')
        echo "SRG_ACTION_TRIGGER_TIME_SEATTLE=${seattle_time}" >> $GITHUB_ENV

        beijing_time=$(TZ='Asia/Shanghai' date '+%m/%d/%Y %T')
        echo "SRG_ACTION_TRIGGER_TIME_BEIJING=${beijing_time}" >> $GITHUB_ENV

        echo "Seattle time: $seattle_time"
        echo "Beijing time: $beijing_time"

        pwd=$(pwd)
        ticket_list=$(txt_to_one_line_format_string.sh "${pwd}/${{ env.SRG_OUTPUT_TICKETS_FILE }}")
        echo "SRG_ACTION_TICKET_LIST=${ticket_list}" >> $GITHUB_ENV
        commits_list=$(txt_to_one_line_format_string.sh "${pwd}/${{ env.SRG_OUTPUT_COMMITS_FILE }}")
        echo "SRG_ACTION_COMMIT_LIST=${commits_list}" >> $GITHUB_ENV
      shell: bash
      if: ${{ github.event_name == 'pull_request' }}

    - name: "TTT -> Update Google Sheet --> 1: append data"
      id: append_data_google_sheet
      uses: jroehl/gsheet.action@v1.2.0
      with:
        spreadsheetId: "${{inputs.google_sheet_id}}"
        commands: | # list of commands, specified as a valid JSON string
          [
            {
              "command": "appendData",
              "args":
                {
                  "worksheetTitle": "${{ inputs.google_sheet_work_sheet_title }}",
                  "data":
                    [
                      [
                          "${{ github.event.repository.name }}",
                          "=HYPERLINK(${{ env.DOUBLE_QUOTE }}${{ github.event.pull_request.html_url }}${{ env.DOUBLE_QUOTE }},${{ env.DOUBLE_QUOTE }}${{ github.event.number }}${{ env.DOUBLE_QUOTE }})",
                          "${{ github.base_ref }}",
                          "${{ github.head_ref }}",
                          "${{ github.event.pull_request.merged }}",
                          "${{ github.event.action }}",
                          "${{ github.actor }}",
                          "${{ env.SRG_ACTION_TRIGGER_TIME_SEATTLE }}",
                          "${{ env.SRG_ACTION_TRIGGER_TIME_BEIJING }}",
                          "${{ env.SRG_ACTION_TICKET_LIST }}",
                          "${{ env.SRG_ACTION_COMMIT_LIST }}"
                      ]
                    ],
                  "minCol": 1,
                  "valueInputOption":"USER_ENTERED"
                }
            }
          ]
      env:
        DOUBLE_QUOTE: '\"'
        GSHEET_CLIENT_EMAIL: ${{ inputs.google_sheet_client_email }}
        GSHEET_PRIVATE_KEY: ${{ inputs.google_sheet_token }}

    - run: |
        echo "ZZZ -> Clean up --> 0: txt files"
        echo ""
        echo "------------- pull_request closed and merged ------------"
        rm -f "${{ env.SRG_PR_CONTENT_TXT }}"
        rm -f "${{ env.SRG_TEMP_FILE }}"
        rm -f "${{ env.SRG_TEMP_COMMITS_FILE }}"
      shell: bash
      if: ${{ github.event_name == 'pull_request' }}