name: 'Srg auto collect changelog'
description: 'Auto collect changelog'
inputs:
  jira_domain:  # id of input ddd
    description: 'The company Jira domain'
    required: true
    default: 'srgxxxx.atlassian.net'
  gh_token:  # id of input ddd
    description: 'gh_token'
    required: true
    default: ''
outputs:
  jira_ticket_list:
    description: "The jira tickets list form pull request and commit message"
    value: ${{ steps.extract_jira_tickets.outputs.jira_ticket_list }}
runs:
  using: "composite"
  steps:
    - run: echo Hello ${{ inputs.jira_domain }}.
      shell: bash
    - id: extract_jira_tickets
      run: |
        echo "jira_ticket_list=$(echo abc-$RANDOM)" >> $GITHUB_OUTPUT
        echo " hello extract_jira_tickets step"

      shell: bash
    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash
    # - run: echo "${{ toJSON(github) }}"
    #   shell: bash
    - run: pwd
      shell: bash

    - run: |
        echo "github event action: ${{github.event.action}}"

        if [[ "${{github.event.pull_request.merged}}" == true && "${{github.event.action}}" == closed ]]; then
          echo "----------------------------> PR merged and closed. <----------------------------"
          echo "PR_STATE=CLOSED_AND_MERGED" >> $GITHUB_ENV
        elif [[ "${{github.event.pull_request.merged}}" == false && "${{github.event.action}}" == closed ]]; then
          echo "----------------------------> PR closed without merging, do nothing. <----------------------------"
          echo "PR_STATE=CLOSED_BUT_NOT_MERGED" >> $GITHUB_ENV
        else
          echo "----------------------------> PR event action:${{github.event_name}} <----------------------------"
          echo "PR_STATE=COMMIT_PUSH" >> $GITHUB_ENV
        fi
      shell: bash

    - run: goodbye.sh
      shell: bash
    - run: |
        repo_org_name=$(get_repo_company_name.sh "SrgGactionChangelogApp")
        echo "repo_org_name --> $repo_org_name"
      shell: bash

    - run: |

        PR_NUMBER=${{ github.event.pull_request.number }}
        REPO_NAME=${{ github.repository }}
        API_URL="https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/commits"

        COMMITS_API_RESPONSE=$(curl -s -H "Authorization: token ${{ inputs.gh_token }}" -H "Accept: application/vnd.github+json" $API_URL)
        echo "COMMITS_API_RESPONSE=$COMMITS_API_RESPONSE" >> $GITHUB_ENV

        PR_NUMBER=${{ github.event.pull_request.number }}
        echo "Pull request number: $PR_NUMBER"

        PR_MERGED=${{ github.event.pull_request.merged }}
        if [ "$PR_MERGED" = "true" ]; then
          PR_NUMBER=${{ github.event.pull_request.number }}
          echo "Pull request number: $PR_NUMBER"

          jq_installed=$(command -v jq)

          if [ -z "$jq_installed" ]; then
            echo "Installing jq"
            sudo apt-get update && sudo apt-get install -y jq
          fi

          echo "---> $COMMITS_API_RESPONSE"

          COMMITS=$(echo $COMMITS_API_RESPONSE | jq -r '.[] | "\(.sha) - \(.commit.message)"')
          echo "Commits in the pull request:"
          echo "$COMMITS"
        else
          echo "Pull request was not merged, unable to retrieve commits."
        fi
      shell: bash

    - run: |
        PR_TITLE=${{ github.event.pull_request.title }}
        PR_BODY=${{ github.event.pull_request.body }}

        echo "Pull request title: $PR_TITLE"
        echo "Pull request body: $PR_BODY"
      shell: bash