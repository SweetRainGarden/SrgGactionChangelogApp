name: 'Srg auto collect changelog'
description: 'Auto collect changelog'
inputs:
  jira_domain:
    description: 'The company Jira domain'
    required: true
    default: 'srgxxxx.atlassian.net'
  gh_token:
    description: 'A Github token with read permission for repos'
    required: true
outputs:
  jira_ticket_list:
    description: "The jira tickets list form pull request and commit message"
    value: ${{ steps.extract_jira_tickets.outputs.jira_ticket_list }}
runs:
  using: "composite"
  steps:
    - run: echo Hello ${{ inputs.jira_domain }}.
      shell: bash

    - run: echo "${{ github.action_path }}" >> $GITHUB_PATH
      shell: bash

    # - run: echo "${{ toJSON(github) }}"
    #   shell: bash

    - run: pwd
      shell: bash

    - run: |
        echo "github event action: ${{github.event.action}}"
        if [[ "${{github.event.pull_request.merged}}" == true && "${{github.event.action}}" == closed ]]; then
          echo "----------------------------> PR merged and closed. <----------------------------"
          echo "PR_STATE=CLOSED_AND_MERGED" >> $GITHUB_ENV
        elif [[ "${{github.event.pull_request.merged}}" == false && "${{github.event.action}}" == closed ]]; then
          echo "----------------------------> PR closed without merging, do nothing. <----------------------------"
          echo "PR_STATE=CLOSED_BUT_NOT_MERGED" >> $GITHUB_ENV
        else
          echo "----------------------------> PR event action:${{github.event_name}} <----------------------------"
          echo "PR_STATE=COMMIT_PUSH" >> $GITHUB_ENV
        fi
      shell: bash

    - run: goodbye.sh
      shell: bash

    - name: "AAA -> init env --> 1: PR_CONTENT_TXT"
      run: |
        echo "PR_CONTENT_TXT=pr_and_branch_info.txt" >> $GITHUB_ENV
        echo "TEMP_FILE=temp.txt" >> $GITHUB_ENV
        echo "COMMITS_FILE=commits.txt" >> $GITHUB_ENV
      shell: bash

    - run: |
        repo_org_name=$(get_repo_company_name.sh "SrgGactionChangelogApp")
        echo "repo_org_name --> $repo_org_name"
      shell: bash

    - run: |
        PR_NUMBER="${{ github.event.pull_request.number }}"
        REPO_NAME="${{ github.repository }}"
        API_URL="https://api.github.com/repos/$REPO_NAME/pulls/$PR_NUMBER/commits"
 
        curl -s -H "Authorization: token ${{ inputs.gh_token }}" -H "Accept: application/vnd.github+json" $API_URL > "${{ env.TEMP_FILE}}"

        PR_MERGED="${{ github.event.pull_request.merged }}"
        if [ "$PR_MERGED" = "true" ]; then
          jq_installed=$(command -v jq)
          if [ -z "$jq_installed" ]; then
            echo "jq is not installed on the machie, exit..." 
            exit 1
          fi

          cat "./${{ env.TEMP_FILE}}"
          echo "---------------------------------------------"
          cat "./${{ env.TEMP_FILE}}" | jq -r '.[] | "\(.sha) - \(.commit.message)"' > "./${{ env.COMMITS_FILE }}"
          cat "./${{ env.COMMITS_FILE }}"

          
        else
          echo "Pull request was not merged, unable to retrieve commits."
        fi
      shell: bash



    - name: "GGG -> init env --> 2: write PR info in file: ${{ env.PR_CONTENT_TXT }}"
      uses: DamianReeves/write-file-action@master
      with:
        path: "./${{ env.PR_CONTENT_TXT }}"
        contents: |
          "${{ github.head_ref }}"
          "${{ github.event.pull_request.title }}"
          "${{ github.event.pull_request.body }}"
        write-mode: overwrite

    - name: "extract jira ticket from pr and commits"
      id: extract_jira_tickets
      run: |
        echo "jira_ticket_list=$(echo abc-$RANDOM)" >> $GITHUB_OUTPUT
        echo " hello extract_jira_tickets step"
        echo "------------------------------------------"
        cat "./${{ env.PR_CONTENT_TXT }}"
      shell: bash

    - name: "ZZZ -> Clean up --> 1: txt files"
      run: |
        rm -f "${{ env.PR_CONTENT_TXT }}"
        rm -f "${{ env.TEMP_FILE }}"
        rm -f "${{ env.COMMITS_FILE }}"
      shell: bash